
import tensorflow as tf
hello =tf.constant('Hello, Tensorflow')
sess = tf.Session()

print(sess.run(hello))
->'Hello, Tensorflow'

--------------------


node1= tf.constant(3.0, tf.float32)
node2= tf.constant(4.0)
print(node1,node2)
-> Tensor("Const_1:0", shape=(), dtype=float32) Tensor("Const_2:0", shape=(), dtype=float32)

-------------------
 
sess = tf.Session()
print(sess.run([node1, node2]))
-> [3.0, 4.0]

-------------------------------

node3 = tf.add( node1,node2)

print('node3: ', node3)
->node3:  Tensor("Add:0", shape=(), dtype=float32)
print('sess.node3: ', sess.run(node3))
-> sess.node3:  7.0

-----------------------------------


>>> a = tf.placeholder(tf.float32)
>>> b = tf.placeholder(tf.float32)
>>> 
>>> adder_node = a+ b
>>> 
>>> 
>>> print( sess.run( adder_node , { a:3, b:4.5}))
7.5
>>> print( sess.run( adder_node , { a:[1,3], b:[4,5]}))
[ 5.  8.]
>>> 
>>> 
>>> add_and_triple = adder_node * 3
>>> print( sess.run( add_and_triple , { a:[1,3], b:[4,5]}))
[ 15.  24.]


-------------------------


W = tf.Variable([.3] , tf.float32)
 b = tf.Variable( [-.3] , tf.float32)
x= tf.placeholder( tf.float32)
linear_model = W * x + b
>>> init = tf.global_variables_initializer()

>>> sess.run(init)

print(sess.run( linear_model , {x:[1, 2, 3, 4]}))
->>[ 0.          0.30000001  0.60000002  0.90000004]

-------------------------------------


>>> y = tf.placeholder( tf.float32)
>>> squared_deltas = tf.square( linear_model -y )
>>> loss = tf.reduce_sum(squared_deltas)
>>> print(sess.run(loss , { x:[1, 2, 3, 4], y:[0, -1, -2, -3]}))
23.66

------------------------------



fixW = tf.assign(W, [-1.])
fixb = tf.assign(b, [1.])
sess.run([fixW, fixb])
print(sess.run(loss, {x:[1,2,3,4], y:[0,-1,-2,-3]}))
- >0.0

-------------------
>>> optimizer = tf.train.GradientDescentOptimizer(0.01)
>>> train = optimizer.minimize(loss)
>>> sess.run(init)

>>> for i in range(1000):
...     sess.run(train , {x :[1, 2, 3, 4], y:[0,1,2,3]})
... 
>>> print(sess.run([W,b]))
[array([ 0.99999827], dtype=float32), array([-0.99999493], dtype=float32)]
>>> 



-------------------------------

----------Complete Linear Regression model ------------

import numpy as np
import tensorflow as tf

# Model parameters
W = tf.Variable([.3], tf.float32)
b = tf.Variable([-.3], tf.float32)
# Model input and output
x = tf.placeholder(tf.float32)
linear_model = W * x + b
y = tf.placeholder(tf.float32)
# loss
loss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares
# optimizer
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(loss)
# training data
x_train = [1,2,3,4]
y_train = [0,-1,-2,-3]
# training loop
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init) # reset values to wrong
for i in range(1000):
  sess.run(train, {x:x_train, y:y_train})

# evaluate training accuracy
curr_W, curr_b, curr_loss  = sess.run([W, b, loss], {x:x_train, y:y_train})
print("W: %s b: %s loss: %s"%(curr_W, curr_b, curr_loss))


------------------------

Using tf.contrin.learn for linearRegressor


----------------
import tensorflow as tf
# NumPy is often used to load, manipulate and preprocess data.
import numpy as np
features = [tf.contrib.layers.real_valued_column("x", dimension=1)]


estimator = tf.contrib.learn.LinearRegressor(feature_columns=features)
x = np.array([1., 2., 3., 4.])
y = np.array([0., -1., -2., -3.])
input_fn = tf.contrib.learn.io.numpy_input_fn({"x":x}, y, batch_size=4, num_epochs=1000)


estimator.fit(input_fn=input_fn, steps=1000)
print(estimator.evaluate(input_fn=input_fn))

--> {'loss': 2.2431703e-08, 'global_step': 1000}


---------------------------
custom model for linear Regressor
------------

import numpy as np
import tensorflow as tf
# Declare list of features, we only have one real-valued feature
def model(features, labels, mode):
  # Build a linear model and predict values
  W = tf.get_variable("W", [1], dtype=tf.float64)
  b = tf.get_variable("b", [1], dtype=tf.float64)
  y = W*features['x'] + b
  # Loss sub-graph
  loss = tf.reduce_sum(tf.square(y - labels))
  # Training sub-graph
  global_step = tf.train.get_global_step()
  optimizer = tf.train.GradientDescentOptimizer(0.01)
  train = tf.group(optimizer.minimize(loss),
                   tf.assign_add(global_step, 1))
  # ModelFnOps connects subgraphs we built to the
  # appropriate functionality.
  return tf.contrib.learn.ModelFnOps(
      mode=mode, predictions=y,
      loss=loss,
      train_op=train)

estimator = tf.contrib.learn.Estimator(model_fn=model)
# define our data set
x = np.array([1., 2., 3., 4.])
y = np.array([0., -1., -2., -3.])
input_fn = tf.contrib.learn.io.numpy_input_fn({"x": x}, y, 4, num_epochs=1000)

# train
estimator.fit(input_fn=input_fn, steps=1000)
# evaluate our model
print(estimator.evaluate(input_fn=input_fn, steps=10))

















